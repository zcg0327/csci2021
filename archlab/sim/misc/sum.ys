# created by Brady Olson 11/15/2016
# DESC:
#	iteratively sums the elements of a linked node list
#	small example list is set up


# setup code 
.pos 0x0
	irmovq 	Stack, %rsp		# move Stack to stack ptr
	rrmovq 	%rsp, %rbp		# copy stack ptr to frame ptr
main:
	irmovq 	ele1, %rdi 		# ls = ele1
	pushq 	%rdi 			# push ls onto stack
	call 	sum_list 
	halt 
							
# linked list from handout
.align 8
ele1: 		.quad 0xa00 
			.quad ele2 
ele2: 		.quad 0x0b0 
			.quad ele3 
ele3: 		.quad 0x00c 
			.quad 0 
												 
sum_list: 
	pushq 	%rbp			# callee-save %rbp 
	xorq 	%rax, %rax		# %rax = val = 0 
	rrmovq 	%rsp, %rbp		# set %rbp
	mrmovq 	16(%rbp), %rdi	# %rdi = ls (fetch from stack)
	jmp 	test			# jump to loop condition
loop:
	mrmovq 	(%rdi), %rsi	# %rsi = temp = ls->val 
	addq 	%rsi, %rax		# val += temp
	mrmovq 	8(%rdi), %rdi	# ls = ls->next 
	andq 	%rdi, %rdi		# test if ls == 0
test:
	andq 	%rdi, %rdi		# test if ls == 0
	jne 	loop			# if 0, goto finish
							# if not, goto loop
# finish: 
	rrmovq 	%rbp, %rsp		# recover %rsp
	popq 	%rbp			# recover %rbp 
	ret						# return

.pos 0x100 
Stack:
